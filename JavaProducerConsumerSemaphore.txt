import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Semaphore;

public class ProducerConsumer {
    private static final int BUFFER_SIZE = 5;
    private static Queue<Integer> buffer = new LinkedList<>();
    private static Semaphore mutex = new Semaphore(1);
    private static Semaphore empty = new Semaphore(BUFFER_SIZE);
    private static Semaphore full = new Semaphore(0);

    public static void main(String[] args) throws InterruptedException {
        Thread producerThread = new Thread(new Producer());
        Thread consumerThread = new Thread(new Consumer());

        producerThread.start();
        consumerThread.start();

        Thread.sleep(100); //This was 10,000
        System.exit(0);
    }

    static class Producer implements Runnable {
        public void run() {
            int value = 0;
            while (true) {
                try {
                    empty.acquire();
                    mutex.acquire();

                    buffer.add(value);
                    System.out.println("Produced " + value);
                    value++;

                    mutex.release();
                    full.release();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    static class Consumer implements Runnable {
        public void run() {
            while (true) {
                try {
                    full.acquire();
                    mutex.acquire();

                    int value = buffer.poll();
                    System.out.println("Consumed " + value);

                    mutex.release();
                    empty.release();
                    
                    Thread.sleep(100); //This was 1000
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

