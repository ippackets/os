public class DiningPhilosopher {
    private static final int NUM_PHILOSOPHERS = 5;
    private static Object[] forks = new Object[NUM_PHILOSOPHERS];

    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            forks[i] = new Object();
        }

        Philosopher[] philosophers = new Philosopher[NUM_PHILOSOPHERS];
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            philosophers[i] = new Philosopher(i, forks[i], forks[(i + 1) % NUM_PHILOSOPHERS]);
        }

        for (Philosopher philosopher : philosophers) {
            new Thread(philosopher).start();
        }

        Thread.sleep(100); //This was 10,000
    }

    static class Philosopher implements Runnable {
        private int id;
        private Object leftFork;
        private Object rightFork;

        public Philosopher(int id, Object leftFork, Object rightFork) {
            this.id = id;
            this.leftFork = leftFork;
            this.rightFork = rightFork;
        }

        public void run() {
            while (true) {
                synchronized (leftFork) {
                    System.out.println("Philosopher " + id + " picked up left fork");
                    synchronized (rightFork) {
                        System.out.println("Philosopher " + id + " picked up right fork and is eating");
                        try {
                            Thread.sleep(100); //This was 1000
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println("Philosopher " + id + " put down right fork");
                }
                System.out.println("Philosopher " + id + " put down left fork and is thinking");
                try {
                    Thread.sleep(100); //This was 1000
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
