//  SJF (Shortest Job First), also known as SRTN (Shortest Remaining Time Next) is a CPU Scheduling Algorithm, the following code is in its non-preemptive form.
import java.util.Scanner;

public class SJF {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];
        int[] bt = new int[n];
        int[] wt = new int[n];
        int[] tat = new int[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter process ID and burst time for process " + (i + 1) + ": ");
            pid[i] = sc.nextInt();
            bt[i] = sc.nextInt();
        }

        // Sort the processes by burst time
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (bt[j] > bt[j + 1]) {
                    int temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }

        // Calculate waiting time
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                wt[i] = 0;
            } else {
                wt[i] = bt[i - 1] + wt[i - 1];
            }
        }

        // Calculate turnaround time
        for (int i = 0; i < n; i++) {
            tat[i] = bt[i] + wt[i];
        }

        System.out.println("Process ID\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t\t" + bt[i] + "\t\t" + wt[i] + "\t\t" + tat[i]);
        }
    }
}




This Java program implements the Shortest Job First (SJF) scheduling algorithm to calculate waiting time, turnaround time, and other metrics for a set of processes.

The program starts by taking user input for the number of processes, process IDs, and their respective burst times. It then sorts the processes by their burst times in ascending order.

Next, the program calculates the waiting time for each process. The waiting time for the first process is set to zero, and for all subsequent processes, it is the sum of the burst times of all previous processes.

Finally, the program calculates the turnaround time for each process, which is the sum of the burst time and waiting time for each process. It then prints out the process ID, burst time, waiting time, and turnaround time for each process in a tabular format.

Overall, the SJF algorithm selects the process with the shortest burst time for execution, which results in a lower average waiting time and turnaround time than some other scheduling algorithms. However, this algorithm requires accurate estimates of the burst time for each process, which may not always be feasible in real-world scenarios.
